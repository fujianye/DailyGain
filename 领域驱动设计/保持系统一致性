
一个系统中包含很多模块。

多个团队开发一个系统，通常是并行开发。每个团队开发系统中的一个特殊部分，这些特殊的部分就是一个个的模块。
每个模块并不完全独立，多少都有点关联性。每个团队开发一个模块给其他团队的其他模块使用。
团队的开发人员在自己的模块A里使用模块B，但是发现模块B还缺少一些功能，于是他增加了这个功能，放到了模块A的代码库里，方便模块A团队的人员使用。
但是他没有意识到这其实是对整体系统的功能的破坏。这种情况很容易发生，因为没人会花时间去完全理解整个系统。
每个人都知道自己的后院里有什么，对其他地方并不是很了解。

好的开始就是成功的一半，但是很多时候，开始良好的系统和流程到最后都一塌糊涂。系统的首要需求是一致性，条款统一和没有矛盾。

**界定**：没必要维持一个迟早要四分五裂的大系统，而是要有意识地将大系统拆解成数个小模块。只要遵守约定，整合的好的每个模块会越来越独立。
每个模块都应该有一个清晰的边界，模块之间的关系应该被清楚的定义。这能保证模块纯洁的最大化。

**持续集成**：模块不是一开始就完全定义，需要不断完善。持续集成需要有测试集，每次集成都要有测试集的自动测试。

**上下文映射**：上下文映射是指抽象出不同界定上下文和他们之间关系的文档，可以是一个视图，也可以是任何其他形式的文档。
上下文映射的重要作用是为了让团队的每个成员，更好的理解，更好的沟通，更好的实现和集成系统。
