

2种常见的现象：
1、在面向对象的开发中，用户界面、数据库及其他支撑性相关的代码经常被直接写到业务对象中。这一部分“附加”的业务逻辑被绑架在了用户界面UI、数据库的行为中。
2、领域相关的代码被混入到其他层，阅读和理解领域的对象变得非常困难。
这2种现象中，领域代码 和 用户界面、数据库等支撑层代码 互相耦合。对每一部分的变更需要更加谨慎，也很难实现自动化测试。

因此将一个复杂的程序切分成层。开发每一个层中内聚的设计，实现层与层之间的低耦合。
将领域模型相关的代码集中放在一个层，把它从用户界面、应用层、基础设施代码中分隔开。让他专注于展现领域模型。

一个通用的领域驱动设计的架构性解决方案包含4个概念层：
用户界面/展现层
负责*向用户展示信息或者解释命令*

应用层
很薄的一层，用来协调应用的活动。他不包含业务逻辑，他不保有业务对象的状态。但他*保有应用任务的进度状态*。

领域层
包含关于领域的信息。这是业务软件的核心所在。在这里*保有业务对象的状态*，对业务对象和他们状态的持久化被委托给了基础设施层。

基础设施层
本层作为其他层的支撑库存在。他提供了层间的通信，实现对业务对象的持久化，包含对用户界面层的支撑库的作用。



将应用划分为分离的层很重要。如果某一段代码没有被清晰的隔离到某层中，它很快就会变混乱。因为他会非常难以管理和变更（散落在很多地方，多个层）。
